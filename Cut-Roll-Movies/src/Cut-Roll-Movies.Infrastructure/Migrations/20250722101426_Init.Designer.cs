// <auto-generated />
using System;
using Cut_Roll_Movies.Infrastructure.Common.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cut_Roll_Movies.Infrastructure.Migrations
{
    [DbContext(typeof(MovieDbContext))]
    [Migration("20250722101426_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cut_Roll_Movies.Core.Casts.Models.Cast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CastOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Character")
                        .HasColumnType("text");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("PersonId");

                    b.ToTable("cast", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.Countries.Models.Country", b =>
                {
                    b.Property<string>("Iso3166_1")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Iso3166_1");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.Crews.Models.Crew", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Department")
                        .HasColumnType("text");

                    b.Property<string>("Job")
                        .HasColumnType("text");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("PersonId");

                    b.ToTable("crew", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.Genres.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("genres", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.Keywords.Models.Keyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("keywords", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.MovieGenres.Models.MovieGenre", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.HasKey("GenreId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("movie_genres", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.MovieImages.Models.MovieImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("movie_images", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.MovieKeywords.Models.MovieKeyword", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int>("KeywordId")
                        .HasColumnType("integer");

                    b.HasKey("MovieId", "KeywordId");

                    b.HasIndex("KeywordId");

                    b.ToTable("movie_keywords", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.MovieOriginCountries.Models.MovieOriginCountry", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.HasKey("MovieId", "CountryCode");

                    b.HasIndex("CountryCode");

                    b.ToTable("movie_origin_countries", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.MovieProductionCompanies.Models.MovieProductionCompany", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.HasKey("MovieId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("movie_production_companies", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.MovieProductionCountries.Models.MovieProductionCountry", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.HasKey("MovieId", "CountryCode");

                    b.HasIndex("CountryCode");

                    b.ToTable("movie_production_countries", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.MovieSpokenLanguages.Models.MovieSpokenLanguage", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("text");

                    b.HasKey("MovieId", "LanguageCode");

                    b.HasIndex("LanguageCode");

                    b.ToTable("movie_spoken_languages", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.MovieVideos.Models.MovieVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("movie_videos", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.Movies.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Budget")
                        .HasColumnType("integer");

                    b.Property<string>("Homepage")
                        .HasColumnType("text");

                    b.Property<string>("ImdbId")
                        .HasColumnType("text");

                    b.Property<string>("Overview")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Rating")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Revenue")
                        .HasColumnType("integer");

                    b.Property<int?>("Runtime")
                        .HasColumnType("integer");

                    b.Property<string>("Tagline")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float?>("VoteAverage")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("movies", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.People.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfilePath")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("people", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.ProductionCompanies.Models.ProductionCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.Property<string>("LogoPath")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode");

                    b.ToTable("production_companies", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.SpokenLanguages.Models.SpokenLanguage", b =>
                {
                    b.Property<string>("Iso639_1")
                        .HasColumnType("text");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Iso639_1");

                    b.ToTable("spoken_languages", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.Casts.Models.Cast", b =>
                {
                    b.HasOne("Cut_Roll_Movies.Core.Movies.Models.Movie", "Movie")
                        .WithMany("Cast")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_Movies.Core.People.Models.Person", "Person")
                        .WithMany("CastRoles")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.Crews.Models.Crew", b =>
                {
                    b.HasOne("Cut_Roll_Movies.Core.Movies.Models.Movie", "Movie")
                        .WithMany("Crew")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_Movies.Core.People.Models.Person", "Person")
                        .WithMany("CrewRoles")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.MovieGenres.Models.MovieGenre", b =>
                {
                    b.HasOne("Cut_Roll_Movies.Core.Genres.Models.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_Movies.Core.Movies.Models.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.MovieImages.Models.MovieImage", b =>
                {
                    b.HasOne("Cut_Roll_Movies.Core.Movies.Models.Movie", "Movie")
                        .WithMany("Images")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.MovieKeywords.Models.MovieKeyword", b =>
                {
                    b.HasOne("Cut_Roll_Movies.Core.Keywords.Models.Keyword", "Keyword")
                        .WithMany("MovieKeywords")
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_Movies.Core.Movies.Models.Movie", "Movie")
                        .WithMany("Keywords")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Keyword");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.MovieOriginCountries.Models.MovieOriginCountry", b =>
                {
                    b.HasOne("Cut_Roll_Movies.Core.Countries.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_Movies.Core.Movies.Models.Movie", "Movie")
                        .WithMany("OriginCountries")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.MovieProductionCompanies.Models.MovieProductionCompany", b =>
                {
                    b.HasOne("Cut_Roll_Movies.Core.ProductionCompanies.Models.ProductionCompany", "Company")
                        .WithMany("MovieProductionCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_Movies.Core.Movies.Models.Movie", "Movie")
                        .WithMany("ProductionCompanies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.MovieProductionCountries.Models.MovieProductionCountry", b =>
                {
                    b.HasOne("Cut_Roll_Movies.Core.Countries.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_Movies.Core.Movies.Models.Movie", "Movie")
                        .WithMany("ProductionCountries")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.MovieSpokenLanguages.Models.MovieSpokenLanguage", b =>
                {
                    b.HasOne("Cut_Roll_Movies.Core.SpokenLanguages.Models.SpokenLanguage", "Language")
                        .WithMany("MovieSpokenLanguages")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_Movies.Core.Movies.Models.Movie", "Movie")
                        .WithMany("SpokenLanguages")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.MovieVideos.Models.MovieVideo", b =>
                {
                    b.HasOne("Cut_Roll_Movies.Core.Movies.Models.Movie", "Movie")
                        .WithMany("Videos")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.ProductionCompanies.Models.ProductionCompany", b =>
                {
                    b.HasOne("Cut_Roll_Movies.Core.Countries.Models.Country", "Country")
                        .WithMany("Companies")
                        .HasForeignKey("CountryCode");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.Countries.Models.Country", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.Genres.Models.Genre", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.Keywords.Models.Keyword", b =>
                {
                    b.Navigation("MovieKeywords");
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.Movies.Models.Movie", b =>
                {
                    b.Navigation("Cast");

                    b.Navigation("Crew");

                    b.Navigation("Images");

                    b.Navigation("Keywords");

                    b.Navigation("MovieGenres");

                    b.Navigation("OriginCountries");

                    b.Navigation("ProductionCompanies");

                    b.Navigation("ProductionCountries");

                    b.Navigation("SpokenLanguages");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.People.Models.Person", b =>
                {
                    b.Navigation("CastRoles");

                    b.Navigation("CrewRoles");
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.ProductionCompanies.Models.ProductionCompany", b =>
                {
                    b.Navigation("MovieProductionCompanies");
                });

            modelBuilder.Entity("Cut_Roll_Movies.Core.SpokenLanguages.Models.SpokenLanguage", b =>
                {
                    b.Navigation("MovieSpokenLanguages");
                });
#pragma warning restore 612, 618
        }
    }
}
